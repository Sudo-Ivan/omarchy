FROM archlinux:latest

# Initialize pacman keyring and update system
RUN pacman-key --init && \
    pacman-key --populate archlinux && \
    pacman -Syu --noconfirm && \
    pacman -S --noconfirm git curl wget base-devel sudo haveged dbus unzip

# Enable multilib repository for 32-bit libraries
RUN sed -i '/^#\[multilib\]/,/^#Include/ s/^#//' /etc/pacman.conf && \
    pacman -Sy --noconfirm

# Create machine-id to prevent dconf warnings
RUN dbus-uuidgen --ensure

# Create test user
RUN useradd -m -G wheel testuser && \
    echo "%wheel ALL=(ALL:ALL) NOPASSWD: ALL" >> /etc/sudoers

# Create mock systemctl to prevent failures
RUN echo '#!/bin/bash' > /usr/local/bin/systemctl && \
    echo 'echo "Mock systemctl: $@"' >> /usr/local/bin/systemctl && \
    echo 'exit 0' >> /usr/local/bin/systemctl && \
    chmod +x /usr/local/bin/systemctl && \
    ln -sf /usr/local/bin/systemctl /usr/bin/systemctl

# Create mock usermod to prevent failures
RUN echo '#!/bin/bash' > /usr/local/bin/usermod && \
    echo 'echo "Mock usermod: $@"' >> /usr/local/bin/usermod && \
    echo 'exit 0' >> /usr/local/bin/usermod && \
    chmod +x /usr/local/bin/usermod && \
    ln -sf /usr/local/bin/usermod /usr/bin/usermod

# Create mock ls for power supply check that returns no battery
RUN echo '#!/bin/bash' > /usr/local/bin/ls_battery && \
    echo 'if [[ "$*" == *"BAT"* ]]; then exit 1; else /bin/ls "$@"; fi' >> /usr/local/bin/ls_battery && \
    chmod +x /usr/local/bin/ls_battery

# Create mock powerprofilesctl to prevent power profile failures
RUN echo '#!/bin/bash' > /usr/local/bin/powerprofilesctl && \
    echo 'echo "Mock powerprofilesctl: $@"' >> /usr/local/bin/powerprofilesctl && \
    echo 'exit 0' >> /usr/local/bin/powerprofilesctl && \
    chmod +x /usr/local/bin/powerprofilesctl

# Create mock mkinitcpio.conf to prevent sed failures
RUN echo 'MODULES=()' > /etc/mkinitcpio.conf && \
    echo 'BINARIES=()' >> /etc/mkinitcpio.conf && \
    echo 'FILES=()' >> /etc/mkinitcpio.conf && \
    echo 'HOOKS=(base udev autodetect modconf block filesystems keyboard fsck)' >> /etc/mkinitcpio.conf

# Create mock mkinitcpio command to prevent failures
RUN echo '#!/bin/bash' > /usr/local/bin/mkinitcpio && \
    echo 'echo "Mock mkinitcpio: $@"' >> /usr/local/bin/mkinitcpio && \
    echo 'exit 0' >> /usr/local/bin/mkinitcpio && \
    chmod +x /usr/local/bin/mkinitcpio && \
    ln -sf /usr/local/bin/mkinitcpio /usr/bin/mkinitcpio

# Create mock updatedb to prevent locate failures
RUN echo '#!/bin/bash' > /usr/local/bin/updatedb && \
    echo 'echo "Mock updatedb: $@"' >> /usr/local/bin/updatedb && \
    echo 'exit 0' >> /usr/local/bin/updatedb && \
    chmod +x /usr/local/bin/updatedb && \
    ln -sf /usr/local/bin/updatedb /usr/bin/updatedb

# Create mock reboot to prevent actual reboot
RUN echo '#!/bin/bash' > /usr/local/bin/reboot && \
    echo 'echo "Mock reboot: $@"' >> /usr/local/bin/reboot && \
    echo 'exit 0' >> /usr/local/bin/reboot && \
    chmod +x /usr/local/bin/reboot && \
    ln -sf /usr/local/bin/reboot /usr/bin/reboot

# Create mock /dev/tty to prevent TTY access errors
RUN mkdir -p /dev && \
    mknod /dev/tty c 5 0 && \
    chmod 666 /dev/tty

# Prevent sudoers syntax issues by pre-creating the problematic files
RUN mkdir -p /etc/sudoers.d && \
    echo "testuser ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/testuser && \
    echo "testuser ALL=(ALL) NOPASSWD: /usr/local/bin/asdcontrol" > /etc/sudoers.d/asdcontrol && \
    chmod 440 /etc/sudoers.d/asdcontrol

# Switch to testuser and set USER environment
USER testuser
WORKDIR /home/testuser
ENV USER=testuser

# Set environment to avoid interactive prompts
ENV DEBIAN_FRONTEND=noninteractive

# Initialize user GPG if needed
RUN echo "%echo Generating test key" > /tmp/gpg-batch && \
    echo "Key-Type: RSA" >> /tmp/gpg-batch && \
    echo "Key-Length: 2048" >> /tmp/gpg-batch && \
    echo "Name-Real: Test User" >> /tmp/gpg-batch && \
    echo "Name-Email: test@example.com" >> /tmp/gpg-batch && \
    echo "Expire-Date: 0" >> /tmp/gpg-batch && \
    echo "%no-protection" >> /tmp/gpg-batch && \
    echo "%commit" >> /tmp/gpg-batch && \
    echo "%echo done" >> /tmp/gpg-batch && \
    gpg --batch --gen-key /tmp/gpg-batch && \
    rm /tmp/gpg-batch

COPY . /home/testuser/omarchy-test

# Run installation with proper environment and mock commands
CMD ["/bin/bash", "-c", "export PATH=/usr/local/bin:$PATH && cd /home/testuser && curl -s https://raw.githubusercontent.com/Sudo-Ivan/omarchy/refs/heads/master/boot.sh | bash && echo 'Omarchy installation test completed'"]
