#!/bin/bash

# Time synchronization script using HTTPS to trusted sources
# Based on Linux hardening best practices to avoid NTP time attacks 
# https://madaidans-insecurities.github.io/guides/linux-hardening.html#time-synchronisation

set -euo pipefail

# Trusted HTTPS sources for time synchronization
TRUSTED_SOURCES=(
    "https://tails.net"
    "https://duckduckgo.com"
    "https://wikipedia.org"
    "https://mozilla.org"
    "https://eff.org"
    "https://torproject.org"
)

# Function to get HTTP date header from a source
get_time_from_source() {
    local url="$1"
    local timeout=15
    
    # Use curl to get HTTP date header with timeout and user agent
    local http_date=$(curl -s -I --connect-timeout $timeout --max-time $timeout \
        --user-agent "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36" \
        "$url" 2>/dev/null | grep -i "^date:" | cut -d' ' -f2-)
    
    if [ -n "$http_date" ]; then
        # Convert HTTP date to Unix timestamp
        local timestamp=$(date -d "$http_date" +%s 2>/dev/null)
        if [ -n "$timestamp" ] && [ "$timestamp" -gt 0 ]; then
            echo "$timestamp"
            return 0
        fi
    fi
    return 1
}

# Function to find the two closest timestamps and calculate accurate time
calculate_accurate_time() {
    local timestamps=("$@")
    local count=${#timestamps[@]}
    
    if [ $count -lt 2 ]; then
        echo "ERROR: Need at least 2 timestamps for accurate calculation" >&2
        return 1
    fi
    
    # Sort timestamps
    IFS=$'\n' sorted=($(sort -n <<<"${timestamps[*]}"))
    unset IFS
    
    echo "All timestamps: ${sorted[*]}" >&2
    
    # Find the two closest timestamps
    local min_diff=999999999
    local closest1=0
    local closest2=0
    
    for ((i=0; i<count-1; i++)); do
        for ((j=i+1; j<count; j++)); do
            local diff=$((sorted[j] - sorted[i]))
            if [ $diff -lt $min_diff ]; then
                min_diff=$diff
                closest1=${sorted[i]}
                closest2=${sorted[j]}
            fi
        done
    done
    
    # Calculate average of the two closest timestamps
    local accurate_time=$(( (closest1 + closest2) / 2 ))
    
    echo "Two closest timestamps:" >&2
    echo "  $(date -d "@$closest1" '+%Y-%m-%d %H:%M:%S UTC') (diff: ${min_diff}s)" >&2
    echo "  $(date -d "@$closest2" '+%Y-%m-%d %H:%M:%S UTC')" >&2
    echo "Time difference between closest: ${min_diff} seconds" >&2
    
    echo "$accurate_time"
}

# Function to check if time difference is reasonable
is_time_reasonable() {
    local current_time=$(date +%s)
    local remote_time="$1"
    local max_diff=3600  # 1 hour tolerance
    
    local diff=$((current_time - remote_time))
    if [ ${diff#-} -le $max_diff ]; then
        return 0
    else
        return 1
    fi
}

# Main synchronization function
sync_time() {
    echo "Starting time synchronization via HTTPS..."
    echo "Querying trusted sources: ${TRUSTED_SOURCES[*]}"
    echo
    
    local timestamps=()
    local successful_sources=0
    
    for source in "${TRUSTED_SOURCES[@]}"; do
        echo -n "Querying $source... "
        
        # Temporarily disable exit on error for this query
        set +e
        timestamp=$(get_time_from_source "$source")
        local query_result=$?
        set -e
        
        if [ $query_result -eq 0 ] && [ -n "$timestamp" ]; then
            echo "SUCCESS ($(date -d "@$timestamp" '+%Y-%m-%d %H:%M:%S UTC'))"
            timestamps+=("$timestamp")
            successful_sources=$((successful_sources + 1))
        else
            echo "FAILED (timeout or no date header)"
        fi
    done
    
    echo
    echo "Successfully queried $successful_sources out of ${#TRUSTED_SOURCES[@]} sources"
    
    if [ $successful_sources -eq 0 ]; then
        echo "ERROR: No successful sources for time sync"
        return 1
    elif [ $successful_sources -eq 1 ]; then
        echo "WARNING: Only one source available, using single timestamp"
        local accurate_timestamp=${timestamps[0]}
        echo "Single timestamp: $(date -d "@$accurate_timestamp" '+%Y-%m-%d %H:%M:%S UTC')"
    else
        # Calculate accurate time using two closest timestamps
        local accurate_timestamp=$(calculate_accurate_time "${timestamps[@]}")
        if [ -z "$accurate_timestamp" ]; then
            echo "ERROR: Failed to calculate accurate timestamp"
            return 1
        fi
        
        echo "Accurate timestamp: $(date -d "@$accurate_timestamp" '+%Y-%m-%d %H:%M:%S UTC')"
    fi
    
    # Check if the time difference is reasonable
    if ! is_time_reasonable "$accurate_timestamp"; then
        echo "WARNING: Time difference is large (>1 hour). Manual verification recommended."
        echo "Current system time: $(date '+%Y-%m-%d %H:%M:%S UTC')"
        echo "Remote time: $(date -d "@$accurate_timestamp" '+%Y-%m-%d %H:%M:%S UTC')"
        echo
        read -p "Continue with time sync? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo "Time sync cancelled by user"
            return 1
        fi
    fi
    
    # Set system time (requires root)
    if [ "$EUID" -eq 0 ]; then
        echo "Setting system time..."
        if date -s "@$accurate_timestamp" >/dev/null 2>&1; then
            echo "SUCCESS: System time synchronized"
            echo "New system time: $(date '+%Y-%m-%d %H:%M:%S UTC')"
            
            # Sync hardware clock
            if command -v hwclock >/dev/null 2>&1; then
                hwclock --systohc
                echo "Hardware clock synchronized"
            fi
            
            return 0
        else
            echo "ERROR: Failed to set system time"
            return 1
        fi
    else
        echo "INFO: Not running as root, cannot set system time"
        echo "Run with sudo to actually sync the system time"
        echo "Recommended command: sudo $0"
        return 0
    fi
}

# Function to show current time status
show_time_status() {
    echo "Current system time: $(date '+%Y-%m-%d %H:%M:%S UTC')"
    echo "Hardware clock time: $(hwclock --show 2>/dev/null | grep -o '[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\} [0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}' || echo 'Unknown')"
    echo "Timezone: $(timedatectl show --property=Timezone --value 2>/dev/null || echo 'Unknown')"
}

# Main script logic
main() {
    case "${1:-sync}" in
        "sync")
            sync_time
            ;;
        "status")
            show_time_status
            ;;
        "help"|"-h"|"--help")
            echo "Usage: $0 [sync|status|help]"
            echo
            echo "Commands:"
            echo "  sync    - Synchronize time via HTTPS (default)"
            echo "  status  - Show current time status"
            echo "  help    - Show this help message"
            echo
            echo "This script synchronizes system time using HTTPS requests to trusted sources"
            echo "instead of NTP to avoid time-based attacks."
            ;;
        *)
            echo "Unknown command: $1"
            echo "Use '$0 help' for usage information"
            exit 1
            ;;
    esac
}

main "$@" 